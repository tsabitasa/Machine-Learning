# -*- coding: utf-8 -*-
"""Prediksi Harga Saham

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qD2aUVcfEgzz_5DII-jr077rrjjoVIte

#**Case**
Pak Jonan adalah investor yang memiliki fokus pada investasi di bidang saham. Namun saat ini, dia memiliki waktu yang sedikit untuk menganalisis semua saham yang ada dikarenakan kesibukannya sebagai menteri. Sebagai seorang machine learning engineer, apa yang akan kalian lakukan supaya dapat memberikan rekomendasi harga saham kepada Pak Jonan?

# Data Preparation

## Data Loading
"""

# Commented out IPython magic to ensure Python compatibility.
#import library
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.model_selection import cross_val_score
from sklearn import linear_model
from sklearn.metrics import mean_squared_error, r2_score

#import Dataset
df = pd.read_csv("https://raw.githubusercontent.com/shofiaikhromi/final-project/main/Copy%20of%20TSLA.csv")
df

"""##Data Understanding"""

df.head(5)

df.tail(5)

df.info()

"""**Deskripsi Data**

1. **Date** = Merupakan tanggal dimana saham diperdagangkan di pasar saham.
2. **Open** = Mewakili harga pembukaan saham pada tanggal tertentu. Ini adalah harga di mana suatu saham mulai
3. **High** = adalah harga tertinggi suatu saham diperdagangkan selama suatu periode. Di sini periodenya adalah satu hari.
4. **Low** = adalah harga terendah di mana suatu saham diperdagangkan selama suatu periode. Di sini periodenya adalah satu hari.
5. **Close** = Merupakan harga penutupan saham pada tanggal tertentu. Ini adalah pesanan beli-jual terakhir yang dieksekusi di antara keduanya
6. **Adj Close** = Harga penutupan yang disesuaikan mengubah harga penutupan saham untuk mencerminkan nilai saham tersebut setelah memperhitungkannya
7. **Volume** = adalah jumlah saham sekuritas yang diperdagangkan selama periode waktu tertentu. Di sini sekuritasnya adalah stok dan jangka waktu
"""

#mau melihat data yg unik
df.nunique()

df.shape

"""Dataset terdiri dari 2579 baris dan 7 kolom"""

df.describe()

"""##Data Checking"""

#memeriksa missing value
df.isna().sum()

"""**output** diatas menunjukkan bahwa  tidak ada data yg NaN dalam dataset"""

#memeriksa data duplikat
df.duplicated().sum()

"""Output diatas menunjukkan bahwa data tidak ada yg duplikat dalam dataset"""

#memeriksa format tanggal
date_format_correct = pd.to_datetime(df['Date'], errors='coerce').notnull().all()

if date_format_correct :
    print("Format tanggal dalam dataset sesuai.")
else:
    print("Ada nilai yang tidak sesuai format tanggal dalam dataset.")

# cek outlier
plt.figure(figsize=(16, 10))

# Membuat boxplot untuk setiap kolom numerik dalam DataFrame Anda
for i, column in enumerate(df.select_dtypes(include=['int64', 'float64']).columns):
    plt.subplot(3, 4, i + 1)
    sns.boxplot(df[column])
    plt.title(column)

plt.tight_layout()
plt.show()

"""**Output** diatas menunjukkan bahwa terdapat banyak outlier dalam dataset tetapi kami tidak menghapusnya dikarenakan akan kehilangan beberapa data dan informasi"""

df = df.rename(columns = {
    'Date' : 'date',
    'Open' : 'open',
    'High' : 'high',
    'Low' : 'low',
    'Close' : 'close',
    'Adj Close' : 'adj_close',
    'Volume' : 'volume'
})
df.head(2)

"""Mengganti Nama kolom agar lebih mudah saat pengerjaan

##Exploratory Data Analysis
"""

# Display the histogram
df.hist(figsize=(10, 10))
plt.show()

# Plot the distribution
sns.distplot(df['open'], bins=20)
plt.title('open')
plt.gca().spines[['top', 'right']].set_visible(False)
plt.show()

sns.scatterplot(
    data=df,
    x='open',
    y='close'
)

"""**Scatter plot** menunjukkan bahwa ada korelasi positif antara harga “open” dan “close”, yang berarti bahwa ketika harga “open” naik, harga “close” cenderung naik juga"""

# mau melihat korelasi disetiap kolom
corr = df.corr()
corr

# Membuat heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr, annot=True, fmt=".2f", cmap='RdBu', vmin=-1, vmax=1, square=True)

# Mengatur label sumbu x
plt.xticks(rotation=45)

# Mengatur judul
plt.title('Heatmap Korelasi',size=25)

# Menampilkan plot
plt.show()

"""**Output** diatas menunjukkan bahwa Variabel-variabel Open, High, Low, Close, dan Adj Close ini memiliki korelasi yang sangat kuat satu sama lain, ditunjukkan dengan warna biru tua. Ini berarti bahwa ketika harga pembukaan (‘open’) naik, harga tertinggi (‘high’), harga terendah (‘low’), harga penutupan (‘close’), dan harga penutupan disesuaikan (‘adj close’) cenderung naik juga.

 Variabel ‘volume’ memiliki korelasi yang lebih lemah dengan variabel lainnya, ditunjukkan dengan warna biru yang lebih muda. Ini berarti bahwa volume perdagangan tidak selalu bergerak seiring dengan perubahan harga.

# Data Prepocessing

## Mengubah tipe data yang tidak sesuai
"""

#Mengubah tipe data kolom 'Date' menjadi datetime
df['date'] = pd.to_datetime(df['date'])

df.dtypes

#Mengubah variabel 'Date' menjadi index
df = df.set_index(["date"])

# Memplot grafik time series
plt.figure(figsize=(10, 6))
plt.plot(df.index, df['close'], color='blue', label='Closing Price')
plt.title('Daily Closing Price of Tesla Stock')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.grid(True)
plt.show()

"""## Basic Statistic"""

df.describe()

"""# Data Modeling

## Variable Identification
"""

y = targets = labels = output_var = df["close"]
X = predictors = input_var = df.loc[:,df.columns != "close"]

"""Pemilihan variabel 'close' sebagai target dikarenakan prediksi harga penutupan dapat memberikan gambaran tentang kinerja saham pada hari tersebut."""

print("Input Variables", list(X.columns))
print("Output Variable", "['close']")

"""**Identifikasi Tipe Data Variabel**"""

df.info()

datatype = df.dtypes
#col = datatype[(datatype == 'object') | (datatype == 'int64')| (datatype == 'float64')].index.tolist()
num_col = datatype[(datatype == 'float64') | (datatype == 'int64')].index.tolist()
cat_col = datatype[(datatype == 'object')].index.tolist()
print("Categorical Columns :",cat_col)
print("Numerical Columns :",num_col)

df.head()

"""## Train Test Split"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)

print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

"""##Prediksi X_train"""

model = linear_model.LinearRegression()

# Commented out IPython magic to ensure Python compatibility.
model.fit(X_train, y_train)
y_pred_train = model.predict(X_train)

print('coefficients:', model.coef_)
print('intercept:', model.intercept_)
print('mean square error (MSE): %.2f'
# %mean_squared_error(y_train, y_pred_train))
print('coefficient of determination (R^2): %.2f'
# % r2_score(y_train, y_pred_train))

"""##Prediksi X_test"""

y_pred_test = model.predict(X_test)

# Commented out IPython magic to ensure Python compatibility.
print('coefficients:', model.coef_)
print('intercept:', model.intercept_)
print('mean square error (MSE): %.2f'
# %mean_squared_error(y_test, y_pred_test))
print('coefficient of determination (R^2): %.2f'
# % r2_score(y_test, y_pred_test))

"""# Data Evaluation"""

def print_evaluate(true, predicted):
    mae = metrics.mean_absolute_error(true, predicted)
    mse = metrics.mean_squared_error(true, predicted)
    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))
    r2_square = metrics.r2_score(true, predicted)
    print('MAE:', mae)
    print('MSE:', mse)
    print('RMSE:', rmse)
    print('R2 Square', r2_square)

def evaluate(true, predicted):
    mae = metrics.mean_absolute_error(true, predicted)
    mse = metrics.mean_squared_error(true, predicted)
    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))
    r2_square = metrics.r2_score(true, predicted)
    return mae, mse, rmse, r2_square

def cross_val(model):
    pred = cross_val_score(model, X, y, cv=10)
    return pred.mean()

# Fit a linear regression model to the data
LR = LinearRegression()
LR.fit(X_train,y_train)

# Print the regression coefficients
print("Coefficients:")
print(LR.intercept_, LR.coef_)

# Make a variable predictions
test_pred=LR.predict(X_test)
train_pred=LR.predict(X_train)

# Calculate evaluation metrics ( MAE, MSE, RMSE, R2 Score)
print('Test set evaluation:\n_____________________________________')
print_evaluate(y_test, test_pred)
print('Train set evaluation:\n_____________________________________')
print_evaluate(y_train, train_pred)

#Summary
results_df = pd.DataFrame(data=[["Linear Regression", *evaluate(y_test, test_pred) , cross_val(LinearRegression())]],
                          columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', "Cross Validation"])
results_df

# Plot data aktual vs. prediksi pada subset data pengujian
plt.scatter(y_test, test_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)  # Garis diagonal y=x
plt.xlabel('Actual (Test)')
plt.ylabel('Predicted (Test)')
plt.title('Actual vs. Predicted (Test)')
plt.show()

df2 = pd.DataFrame({"Actual": y_test, "Predicted": test_pred})
df2.head(10)